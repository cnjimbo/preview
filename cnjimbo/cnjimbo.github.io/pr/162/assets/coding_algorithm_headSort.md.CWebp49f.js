import{_ as n,o as s,c as d,I as a,w as r,a as e,j as l,D as t}from"./chunks/framework.DhkxPDMh.js";const k=JSON.parse('{"title":"堆排序","description":"","frontmatter":{"sidebar":{"title":"排序--堆排序","step":4},"isTimeLine":true,"title":"堆排序","date":"2020-08-02T00:00:00.000Z","tags":["手撕代码","算法与数据结构"],"categories":["手撕代码"]},"headers":[],"relativePath":"coding/algorithm/headSort.md","filePath":"coding/algorithm/headSort.md","lastUpdated":1719297432000}'),c={name:"coding/algorithm/headSort.md"},U=l("h1",{id:"堆排序",tabindex:"-1"},[e("堆排序 "),l("a",{class:"header-anchor",href:"#堆排序","aria-label":'Permalink to "堆排序"'},"​")],-1),i=l("p",null,"给你一个整数数组 nums，请你将该数组升序排列。",-1),J=l("h2",{id:"原理",tabindex:"-1"},[e("原理 "),l("a",{class:"header-anchor",href:"#原理","aria-label":'Permalink to "原理"'},"​")],-1),h=l("blockquote",null,[l("p",null,"堆排序的思想就是先将待排序的序列建成大根堆，使得每个父节点的元素大于等于它的子节点。此时整个序列最大值即为堆顶元素，我们将其与末尾元素交换，使末尾元素为最大值，然后再调整堆顶元素使得剩下的 n-1n−1 个元素仍为大根堆，再重复执行以上操作我们即能得到一个有序的序列。")],-1),M=l("h2",{id:"实现",tabindex:"-1"},[e("实现 "),l("a",{class:"header-anchor",href:"#实现","aria-label":'Permalink to "实现"'},"​")],-1),_=l("p",null,"。。。未完待续",-1);function m(p,I,y,Q,O,R){const o=t("company"),T=t("LeetCode");return s(),d("div",{"data-pagefind-body":!0,"data-pagefind-meta":"base64:JTdCJTIyc2lkZWJhciUyMiUzQSU3QiUyMnRpdGxlJTIyJTNBJTIyJUU2JThFJTkyJUU1JUJBJThGLS0lRTUlQTAlODYlRTYlOEUlOTIlRTUlQkElOEYlMjIlMkMlMjJzdGVwJTIyJTNBNCU3RCUyQyUyMmlzVGltZUxpbmUlMjIlM0F0cnVlJTJDJTIydGl0bGUlMjIlM0ElMjIlRTUlQTAlODYlRTYlOEUlOTIlRTUlQkElOEYlMjIlMkMlMjJkYXRlJTIyJTNBMTU5NjMyNjQwMDAwMCUyQyUyMnRhZ3MlMjIlM0ElNUIlMjIlRTYlODklOEIlRTYlOTIlOTUlRTQlQkIlQTMlRTclQTAlODElMjIlMkMlMjIlRTclQUUlOTclRTYlQjMlOTUlRTQlQjglOEUlRTYlOTUlQjAlRTYlOEQlQUUlRTclQkIlOTMlRTYlOUUlODQlMjIlNUQlMkMlMjJjYXRlZ29yaWVzJTIyJTNBJTVCJTIyJUU2JTg5JThCJUU2JTkyJTk1JUU0JUJCJUEzJUU3JUEwJTgxJTIyJTVEJTdE"},[U,a(o,{value:"几种常见时间复杂度比较低的排序算法之一"}),a(T,{href:"https://leetcode-cn.com/problems/sort-an-array/"},{default:r(()=>[e("912：排序树组")]),_:1}),i,J,h,M,_])}const E=n(c,[["render",m]]);export{k as __pageData,E as default};
